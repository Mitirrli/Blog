[{"categories":["gitlab"],"content":"Gitlab版本升级 公司目前gitlab版本是9.5.5,因升级服务器顺道把gitlab也升到最新,这里记录下历程。\n备份Gitlab 1  $ gitlab-rake gitlab:backup:create   执行命令进行备份，将会生成一个命名格式为_gitlab_backup.tar的压缩包\nGitlab升级 升级历程: 9.5.5 -\u003e 9.5.9 -\u003e 9.5.10 -\u003e 10.8.7 -\u003e 11.11.8 -\u003e 12.0.12 -\u003e 12.10.14 -\u003e 13.0.12 -\u003e 13.2.3 按照官网升级顺序依次升级\n下载deb包(*为版本号) 1  $ wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/xenial/main/g/gitlab-ce/gitlab-ce_*-ce.0_amd64.deb   安装deb包 1  $ dpkg -i *.deb   查看版本 1  $ cat /opt/gitlab/embedded/service/gitlab-rails/VERSION   Gitlab恢复 首先关闭服务\n1  $ gitlab-rake gitlab:backup:restore BACKUP 1597233443_2020_08_12_9.3.1   Gitlab 502解决(查看pid) 1  $ gitlab-ctl status   ","description":"","tags":["gitlab"],"title":"Update Gitlab","uri":"/blog/gitlab/update/"},{"categories":["docker"],"content":"使用docker快速搭建你的php环境 快速使用 1 2 3  $ git clone https://github.com/Mitirrli/docker-compose.git $ cp .env.example .env   之后在项目根目录放置自己代码，在.docker/nginx/conf.d下放置nginx配置文件即可\n环境变量 # Port PHP5_PORT=9005 PHP7_PORT=9007 WEB_PORT=80 REDIS_PORT=6379 # Container PHP5_CONTAINER_NAME=php5 PHP7_CONTAINER_NAME=php7 NGINX_CONTAINER_NAME=web REDIS_CONTAINER_NAME=redis # Version PHP5_VERSION=5.5.38-fpm-alpine PHP7_VERSION=7.1.30-fpm-alpine PHP7REDIS_VERSION=5.3.1 PHP5REDIS_VERSION=5.3.1 REDIS_VERSION=6.0.6-alpine3.12 NGINX_VERSION=latest XLSWRITER_VERSION=1.3.6 SWOOLE_VERSION=4.5.2 # Ini INSTALL_XDEBUG=true INSTALL_REDIS=true INSTALL_XLSWRITER=false INSTALL_SWOOLE=false docker-compose命令 1 2 3 4 5 6 7 8 9 10 11  $ docker-compose up //前台启动 $ docker-compose up -d //后台启动 $ docker-compose stop //暂停容器 $ docker-compose start //启动容器 $ docker-compose down -v //停止并删除容器 $ docker exec -it [container_name] sh //进入容器   开启Xdebug 1 2 3 4 5  1 . .env配置INSTALL_XDEBUG为true 2 . Preferences -\u003e Set Debug port 9001 3 . Select path mapping   具体项目位置\n","description":"","tags":["docker","php"],"title":"Php Environment","uri":"/blog/docker/php-environment/"},{"categories":["kubernetes"],"content":"K8S遇到的问题记录 K8S节点状态无法调度,状态为SchedulingDisabled 解决方案(*为ip):\n1  $ kubectl patch no * -p '{\"spec\": {\"unschedulable\": false}}'   Back-off restarting failed container 根据Describe Pod,pod内的Container已完成.但是Pod的生命周期非常短,要使Pod持续运行,您必须指定一个永远不会完成的任务.\nK8S挂载单个文件 使用subPath,部分代码如下:\n1 2 3 4  volumeMounts:- mountPath:/var/www/html/.envname:envsubPath:.env  K8S获取崩溃容器的应用日志 1 2 3 4  如果你的容器重启,kubectl logs命令将显示当前容器的日志。 如果你想看前一个容器的日志,添加--previous kubectl logs mypod --previous   ","description":"","tags":["kubernetes"],"title":"Schedule Disabled","uri":"/blog/kubernetes/question-record/"},{"categories":["php"],"content":"1. 设置时区  date_default_timezone_set — 设定用于一个脚本中所有日期时间函数的默认时区\n date_default_timezone_set ( string $timezone_identifier ) : bool 用法 1  date_default_timezone_set('Asia/Shanghai');    ini_set — 为一个配置选项设置值，这个选项会在脚本运行时保持新的值，并在脚本结束时恢复。\n 用法 1  ini_set('date.timezone','Asia/Shanghai');   支持使用ini_set修改的参数附录\n2. 生成一个格式化的时间  date — 格式化一个本地时间／日期\n date ( string $format [, int $timestamp ] ) : string    format 字符 描述 返回值示例     天 — —   d 一个月中的第几天，有前导0的2位数字 从01到31   D 3个字符表示的星期几 3个字符表示的星期几，从Mon到Sun   j 一个月中的第几天，无前导0 从1到31   N ISO-8601 规定的数字表示的星期几 从1(表示星期一)到7(表示星期日)   w 数字表示的星期几 从0(星期日)到6(星期六)   z 一年中的第几天，从0开始计数 从 0 到 365   周 — —   W ISO-8601规范的一年中的第几周，周一视为一周开始。 42(本年第42周)   月 — —   m 带有0前导的数字表示的月份 从01到12   n 月份的数字表示，无前导0 从1到12   t 给定月份中包含多少天 从28到31   年 — —   Y 4位数字的年份 1999或2003   y 2位数字的年份 99或03   时间 — —   a 上午还是下午，2位小写字符 am或pm   A 上午还是下午，2位大写字符 AM或PM   g 小时，12时制，无前导0 从1到12   G 小时，24时制，无前导0 从0到23   h 小时，12时制，有前导0的2位数字 从01到12   H 小时，24时制，有前导0的2位数字 从00到23   i 分钟，有前导0的2位数字 从00到59   s 秒，有前导0的2位数字 从00到59   完整的日期/时间 — —   c ISO 8601日期及时间 2004-02-12T15:19:21+00:00   U 时间戳，以秒为单位 1539100800    更多可以参考php手册\n3. 将时间转换为时间戳  strtotime — 将任何字符串的日期时间描述解析为 Unix 时间戳\n 用法 1 2 3 4  strtotime('+1 day'); strtotime(\"+1 week 2 days 4 hours 2 seconds\"); strtotime(\"next Thursday\"); strtotime(\"last Monday\");   常用用法 1 2 3 4  strtotime(date('Y-m-d')); strtotime('+1 day', strtotime(date('Y-m-d'))); strtotime(\"first day of next month\", strtotime(\"2017-01-31\")); strtotime(\"last day of last month\", strtotime(\"2017-03-31\"));   注意 1 2 3 4 5 6 7 8  var_dump(date(\"Y-m-d\", strtotime(\"-1 month\", strtotime(\"2017-03-31\")))); //输出2017-03-03 var_dump(date(\"Y-m-d\", strtotime(\"+1 month\", strtotime(\"2017-08-31\")))); //输出2017-10-01 var_dump(date(\"Y-m-d\", strtotime(\"next month\", strtotime(\"2017-01-31\")))); //输出2017-03-03 var_dump(date(\"Y-m-d\", strtotime(\"last month\", strtotime(\"2017-03-31\")))); //输出2017-03-03   解决方案 1 2 3 4 5 6 7 8  var_dump(date(\"Y-m-d\", strtotime(\"last day of -1 month\", strtotime(\"2017-03-31\")))); //输出2017-02-28 var_dump(date(\"Y-m-d\", strtotime(\"first day of +1 month\", strtotime(\"2017-08-31\")))); //输出2017-09-01 var_dump(date(\"Y-m-d\", strtotime(\"first day of next month\", strtotime(\"2017-01-31\")))); //输出2017-02-01 var_dump(date(\"Y-m-d\", strtotime(\"last day of last month\", strtotime(\"2017-03-31\")))); //输出2017-02-28   更多可以参考令人困惑的strtotime\n","description":"","tags":["php"],"title":"Php 部分时间函数","uri":"/blog/php/time/"},{"categories":["php"],"content":"有用的php命令行命令 1. 查看当前已安装的扩展 1  $ php -m   2. 查看当前php版本 1  $ php -v   3. 查看扩展版本 1  $ php --ri 扩展名   4. 快速查看扩展版本 1  $ php -i | less   5. 查看php配置文件路径 1  $ php -i | grep php.ini   6. 执行文件(检查代码语法是否正确) 1  $ php -f 文件名   7. 直接执行代码 1  $ php -r 'echo 1;'   8. 检查代码语法 1  $ php -l 文件名   9. 查看帮助 1  $ php -h   10. 查看当前php可执行文件位置 1  $ which php   11. 开启服务 1  $ php -S 0.0.0.0:1234   12. 读取特定的ini文件 1  $ php -c /usr/local/etc/php/php.ini   ","description":"","tags":["script","php"],"title":"Php Command Script","uri":"/blog/php/script/"}]
